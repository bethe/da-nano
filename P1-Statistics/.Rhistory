ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue")+
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "black", alpha = 0.2)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "black", alpha = 0.7)
geom_density()
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "black", alpha = 0.7) +
geom_density(alhpa = 0.2, fill = "red")
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "black", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent, y = ..density..), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "black", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent, y = ..density..), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent, y = ..density..), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue" alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent, y = ..density..), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent, y = ..density..), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent, y = ..density..), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7) +
geom_density(alpha = 0.2, fill = "green")
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7) +
geom_density(alpha = 1, fill = "green")
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_density() +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7) +
geom_density()
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 3, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 1, fill = "red", alpha = 0.7) +
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 3, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 3, fill = "red", alpha = 0.7) +
)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 3, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 3, fill = "red", alpha = 0.7)
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 2, fill = "red", alpha = 0.7)
+ geom_density()
ggplot() +
geom_histogram(data = raw, aes(x=Congruent), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(data = raw, aes(x=Incongruent), binwidth = 2, fill = "red", alpha = 0.7) +
geom_density()
ggplot(data = raw) +
geom_histogram(aes(x=Congruent), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(aes(x=Incongruent), binwidth = 2, fill = "red", alpha = 0.7) +
)
ggplot(data = raw) +
geom_histogram(aes(x=Congruent), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(aes(x=Incongruent), binwidth = 2, fill = "red", alpha = 0.7)
ggplot(data = raw) +
geom_denisty(aes(x=Congruent))
ggplot(data = raw) +
geom_density(aes(x=Congruent))
ggplot(data = raw) +
geom_histogram(aes(x=Congruent), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_density(aes(x=Congruent)) +
geom_histogram(aes(x=Incongruent), binwidth = 2, fill = "red", alpha = 0.7)
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.7) +
geom_density(aes(x=Congruent)) +
geom_density(aes(x=Incongruent))
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 1, fill = "blue", alpha = 0.7) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 1, fill = "red", alpha = 0.7) +
geom_density(aes(x=Congruent)) +
geom_density(aes(x=Incongruent))
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.7) +
geom_density(aes(x=Congruent)) +
geom_density(aes(x=Incongruent))
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "green") +
geom_density(aes(x=Incongruent))
## 3 Histograms with Density curve
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "dark-blue") +
geom_density(aes(x=Incongruent))
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "blue", alpha = 0.5) +
geom_density(aes(x=Incongruent))
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "blue", alpha = 0.5) +
geom_density(aes(x=Incongruent), fill = "red", alpha = 0.5)
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "blue", alpha = 0.5) +
geom_density(aes(x=Incongruent), fill = "red", alpha = 0.5)
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "blue", alpha = 0.5) +
geom_density(aes(x=Incongruent), fill = "red", alpha = 0.5) +
xlab("Time to read (s)")
colnames(raw)
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "blue", alpha = 0.5) +
geom_density(aes(x=Incongruent), fill = "red", alpha = 0.5) +
xlab("Time to read (s)") +
labs(color = colnames)
ggplot(data = raw) +
geom_histogram(aes(x=Congruent, y = ..density..), binwidth = 2, fill = "blue", alpha = 0.4) +
geom_histogram(aes(x=Incongruent, y = ..density..), binwidth = 2, fill = "red", alpha = 0.4) +
geom_density(aes(x=Congruent), fill = "blue", alpha = 0.5) +
geom_density(aes(x=Incongruent), fill = "red", alpha = 0.5) +
xlab("Time to read (s)") +
labs("color = colnames")
stroop$time <- raw$Congruent
as.data.frame(stroop$time) <- raw$Congruent
stroop <- raw$Congruent
stroop.append <- raw$Incongruent
append(stroop) <- raw$Incongruent
stroop.append <- NULL
length(stroop)
append(stroop, raw$Incongruent)
length(stroop)
stroop <- append(stroop, raw$Incongruent)
temp <- rep(25, "Congruent")
temp <- rep("Congruent", 25)
temp <- append(temp, rep("Incongruent", 25))
temp <- c(rep("Congruent", 24), rep("Incongruent", 24))
stroop$Treatment <- c(rep("Congruent", 24), rep("Incongruent", 24))
stroop <- as.data.frame(raw$Congruent)
stroop <- append(stroop, raw$Incongruent)
stroop <- as.data.frame(raw$Congruent
stroop <- as.data.frame(append(stroop, raw$Incongruent))
stroop <- as.data.frame(raw$Congruent)
stroop <- as.data.frame(append(stroop, raw$Incongruent))
stroop <- as.data.frame(raw$Congruent)
stroop <- raw$Congruent
stroop <- append(stroop, raw$Incongruent)
stroop <- as.data.frame(stroop)
stroop$Treatment <- c(rep("Congruent", 24), rep("Incongruent", 24))
head(stroop)
colnames(stroop)
colnames(stroop[1])
colnames(stroop[1]) <- seconds
colnames(stroop[1]) <- "seconds"
colnames(stroop)
names(stroop[1]) <- "seconds"
head(stroop)
colnames(stroop[1]) <-c("seconds")
head(stroop)
colnames(stroop) <-c("Seconds", "Treatment" )
head(stroop)
ggplot(data = stroop, aes(x=Seconds, colors =Treatment)) +
geom_histogram(binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogrambinwidth = 2, fill = "red", alpha = 0.7)
ggplot(data = stroop, aes(x=Seconds, colors =Treatment)) +
geom_histogram(binwidth = 2, fill = "blue", alpha = 0.7) +
geom_histogram(binwidth = 2, fill = "red", alpha = 0.7)
ggplot(data = stroop, aes(x=Seconds, colors =Treatment)) #+
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) #+
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 2, fill = "blue", alpha = 0.7) +
)
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 2, fill = "blue", alpha = 0.7) #+
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 2, alpha = 0.7) #+
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 2, alpha = 0.5) #+
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) #+
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(aes(x=..density..)binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(aes(x=..density..)binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(aes(x=..density..), binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(aes(x=..density..), binwidth = 1, alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram, binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram, binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle("Title")
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5)
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle("Title")
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read for each treatment group"),
(atop(italic(Histograms and Density Estimates)))) ")
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read for each treatment group"),
(atop(italic("Histograms and Density Estimates")))) ")
)
)
)
klj;l
)))))
+
-
"
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read for each treatment group"),
(atop(italic("Histograms and Density Estimates")))))
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read for each treatment group",
(atop(italic("Histograms and Density Estimates")))))
)
## 3 Plot Histograms & Density in parallel
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read for each treatment group",
atop(italic("Histograms and Density Estimates"))))
)
## 3 Plot Histograms & Density in parallel
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read for each treatment group",
atop(italic("Histograms and Density Estimates")))))
min.mean.sd.max <- function(x) {
r <- c(min(x), mean(x) - sd(x), mean(x), mean(x) + sd(x), max(x))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
# ggplot code
p1 <- ggplot(aes(y = value, x = factor(group)), data = mydata)
p1 <- p1 + stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Boxplot con media, 95%CI, valore min. e max.") + xlab("Gruppi") + ylab("Valori")
p1 <- ggplot(aes(y = value, x = factor(Treatment)), data = stroop)
p1 <- p1 + stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Boxplot con media, 95%CI, valore min. e max.") + xlab("Gruppi") + ylab("Valori")
p1
p1 <- ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop)
p1 <- p1 + stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Boxplot con media, 95%CI, valore min. e max.") + xlab("Gruppi") + ylab("Valori")
p1
min.mean.sd.max <- function(x) {
r <- c(min(x), mean(x) - 1.96*sd(x), mean(x), mean(x) + 1.96*sd(x), max(x))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Boxplot with mean, 95%CI, valore min. e max.") + xlab("Gruppi") + ylab("Valori")
min.mean.sd.max <- function(x) {
r <- c(min(x), mean(x) - 0.5*sd(x), mean(x), mean(x) + 0.5*sd(x), max(x))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) + ggtitle("Boxplot with mean, 95%CI, valore min. e max.") + xlab("Gruppi") + ylab("Valori")
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle("Boxplot with mean, 95%CI, and maximum times") + xlab("Treatment Group(s") + ylab("Time (Seconds") )")
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle("Boxplot with mean, 95%CI, and maximum times") + xlab("Treatment Groups") + ylab("Time (Seconds") )")
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle("Boxplot with mean, 95%CI, and maximum") + xlab("Treatment Groups") + ylab("Time (Seconds")))
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle("Boxplot with mean, 95%CI, and maximum") + xlab("Treatment Groups") + ylab("Time (Seconds"))
ggplot(aes(y=Seconds, x = factor(Treatment)), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle("Boxplot with mean, 95%CI, and maximum") + xlab("Treatment Groups") + ylab("Time (Seconds")
min.mean.sd.max <- function(x) {
r <- c(min(x), mean(x) - 1.96*sd(x), mean(x), mean(x) + 1.96*sd(x), max(x))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
# ggplot code
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle("Boxplot with mean, 95%CI, and maximum") +
xlab("Treatment Groups") +
ylab("Time (Seconds")
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read for each treatment group",
atop(italic("Boxplot with means, 95%CI, and maxima by group"))) +
xlab("Treatment Groups") +
ylab("Time (Seconds")
)
""
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read for each treatment group",
atop(italic("Boxplot with means, 95%CI, and maxima by group"))))) +
xlab("Treatment Groups") +
ylab("Time (Seconds")
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read by treatment group",
atop(italic("Boxplot with means, 95%CI, and maxima by group"))))) +
xlab("Treatment Groups") +
ylab("Time (Seconds)")
ggplot(data = stroop, aes(x=Seconds, y=..density.., fill=Treatment)) +
geom_histogram(binwidth = 1, alpha = 0.5) +
geom_density(alpha = 0.5) +
ggtitle(expression(atop("Time it took people to read by treatment group",
atop(italic("Histograms and Curve Estimates")))))
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
geom_boxplot() +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read by treatment group",
atop(italic("Boxplot with means, 95%CI, and maxima by group"))))) +
xlab("Treatment Groups") +
ylab("Time (Seconds)")
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_boxplot() +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read by treatment group",
atop(italic("Boxplot with means, 95%CI, and maxima by group"))))) +
xlab("Treatment Groups") +
ylab("Time (Seconds)")
min.mean.sd.max <- function(x) {
r <- c(min(x), mean(x) - 0.6745*sd(x), mean(x), mean(x) + 0.6745*sd(x), max(x))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
# ggplot code
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read by treatment group",
atop(italic("Boxplot with means, 95%CI, and maxima by group"))))) +
xlab("Treatment Groups") +
ylab("Time (Seconds)")
# ggplot code
ggplot(aes(y=Seconds, x=factor(Treatment), fill=Treatment), data = stroop) +
stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") +
geom_jitter(position=position_jitter(width=.2), size=3) +
ggtitle(expression(atop("Time it took people to read by treatment group",
atop(italic("Boxplot with means, quantiles, and range"))))) +
xlab("Treatment Groups") +
ylab("Time (Seconds)")
t.test(raw$Congruent, raw$Incongruent)
?t.test
t.test(raw$Congruent, raw$Incongruent, alternative = "less")
t.test(raw$Congruent, raw$Incongruent, alternative = "less", paired = TRUE)
####
# Calculating best 11 for playlivemanager.com
####
## Optimize with Linear Programming
# Following instructions from http://lpsolve.sourceforge.net/5.5/R.htm
#install.packages("lpSolve")
#install.packages("lpSolveAPI")
library("lpSolve")
library("lpSolveAPI")
library("plyr")
# Import Data
load("dataprep.RData")
# Add Code for position for sorting later
oneliner$poscode <- as.integer(revalue(oneliner$Pos, c("GOA" = 1, "DEF" = 2, "MID" = 3, "ATT" = 4)))
# Add points earned by matchday in new dataframe "fullhouse"
fullhouse <- oneliner
bl_rounds <- subset(bl_raw, bl_raw$id %in% fullhouse$id)
# get number of rounds played
rounds = max(bl_rounds$matchday)
# get columns in dataset now to rename additional columns later
cols = length(fullhouse)
# loop to get all earnings by round
for (i in 1:rounds) {
round_only <-  subset(bl_rounds["total_earnings"], bl_rounds$matchday == i )
fullhouse <- transform(fullhouse, round = round_only)
# NOTE: works as long as both fullhouse & round are ordered by id
}
# loop to rename columns to "RoundX" format
for (i in (cols+1):(cols+rounds)) {
colnames(fullhouse)[i] <- paste0("Round",i-12)
}
## Function to calculate best11
best11 <- function(objective, value = 100) {     # where v is max total value, r = data to optimize
## Set up framework LPS
formation <- make.lp(0,nrow(fullhouse))
lp.control(formation, sense = "max")
set.objfn(formation, objective) # obj.function to maformoverallimize
# Total Value constraint
add.constraint(formation, fullhouse$init_Value, "<=", value)
# Position / Formation constraints
add.constraint(formation, (fullhouse$Pos == "GOA")*1, "=", 1) # GOA
add.constraint(formation, (fullhouse$Pos == "DEF")*1, ">=", 3) # DEF
add.constraint(formation, (fullhouse$Pos == "DEF")*1, "<=", 5) # DEF
add.constraint(formation, (fullhouse$Pos == "MID")*1, ">=", 3) # MID
add.constraint(formation, (fullhouse$Pos == "MID")*1, "<=", 5) # MID
add.constraint(formation, (fullhouse$Pos == "ATT")*1, ">=", 1) # ATT
add.constraint(formation, (fullhouse$Pos == "ATT")*1, "<=", 3) # ATT
add.constraint(formation, rep(1, nrow(fullhouse)), "=", 11) # 11 players
# Max 4 per club constraints
add.constraint(formation, (fullhouse$Club == "B04")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "BMG")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "BRE")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "BSC")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "BVB")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "D98")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "FCA")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "FCB")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "FCI")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "H96")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "HSV")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "KOE")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "M05")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "S04")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "SGE")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "TSG")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "VFB")*1, "<=", 4)
add.constraint(formation, (fullhouse$Club == "WOB")*1, "<=", 4)
# Set type & limit of LPS
set.type(formation, c(1:nrow(fullhouse)),"integer")
set.bounds(formation, lower = rep(0, nrow(fullhouse)), upper = rep(1, nrow(fullhouse)), columns = 1:nrow(fullhouse))
# Solve model
solve(formation)
# Store output
temp <- fullhouse[,c(1:4,11:12)]
temp$Earnings <- r
temp$top <- get.variables(formation)
temp <- subset(temp, temp$top == 1)
temp <- temp[order(temp$poscode),]
#output
return(temp[,c("id", "Name", "Club", "Pos", "init_Value", "Earnings")])
}
# Count columns to facilitate renaming later
cols2 = length(fullhouse)
# Get Best11 for each round via Loop
for (i in 1:rounds) {
round11 <-  best11(fullhouse[,(cols+i)], 100)[,1]
round11df <- as.data.frame(fullhouse$id %in% c(round11)*1)
#	colnames(round11df)[1] <- "best11"
fullhouse <- transform(fullhouse, best11 = round11df)
# NOTE: only works as long as both fullhouse & longvector are ordered by id
}
# loop to rename columns to "Best11RoundX" format
for (i in (cols2+1):(cols2+rounds)) {
colnames(fullhouse)[i] <- paste0("Best11Round",i-24)
}
#Count columns again. Always handy.
cols3 = length(fullhouse)
# Add column with number of Best11s
fullhouse$Best11s <- rowSums(fullhouse[,((cols2+1):cols3)])
# Check checkedicheck
temp <- subset(fullhouse[,c("Name", "Club", "Pos", "init_Value", "poscode", "Best11s")], fullhouse$Best11s > 1)
temp[order(temp$poscode, -temp$Best11s),]
# Save for later
save(bl_raw, bl_rounds, fullset, oneliner, fullhouse, file = "dataprep.RData")
save.image()
library("lpSolve")
library("lpSolveAPI")
library("plyr")
install.packages("lpSolveAPI")
install.packages("lpSolve")
